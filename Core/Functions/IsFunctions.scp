// Checks <ArgN> radius for Player's Corpse.
[Function IsNearMyCorpse]
ForItems <ArgN>
 If ((<Type> == tCorpse) && (<Link.UID> == <UID>))
  Return 1
 EndIf
EndFor


// Is it BlessRune or Blessed? Need to double check later.
[Function IsBlessed]
If (<IsChar>)
 Return <QVal (<FindLayer.LayerSpecial.BaseID> == iBlessRune) ? 1 : 0>
ElIf (<IsItem>)
 Return <QVal (<Attr> &AttrBlessed) ? 1 : 0>
EndIf


[Function IsCursed]
If (<IsChar>)
 Return <QVal (<FindLayer.LayerSpecial.BaseID> == iCurseRune) ? 1 : 0>
ElIf (<IsItem>)
 Return <QVal (<Attr> &AttrCursed) ? 1 : 0>
EndIf


[Function IsAlterable]
Return <Qval (<AlterItem> != 0) ? 1 : 0>


// Player IsDead
[Function IsDead]
Return <Qval (<Flags> &StatFDead) ? 1 : 0 >


// Racial/Gender Functions
[Function IsHuman]
Return <Qval ((<DispID> == cHumanMale) || (<DispID> == cHumanFemale)) ? 1 : 0 >


[Function IsElf]
Return <Qval ((<DispID> == cElfMale) || (<DispID> == cElfFemale)) ? 1 : 0 >


[Function IsGargoyle]
Return <Qval ((<DispID> == cGargoyleMale) || (<DispID> == cGargoyleFemale)) ? 1 : 0 >


[Function IsMale]
Return <Qval (<Can> &CanMale) ? 1 : 0 >


[Function IsFemale]
Return <Qval (<Can> &CanFemale) ? 1 : 0 >


[Function IsReagent]
Return <QVal (<Type> == tReagent) ? 1 : 0>


[Function IsIngredient]
Return <QVal (<Type> == tIngredient) ? 1 : 0>


[Function IsTypeWeapon]
Return <QVal ((<Type> == tSwordWeapon) || (<Type> == tPickaxeWeapon) || (<Type> == tStaffWeapon) || (<Type> == tWarAxeWeapon) || (<Type> == tCrookWeapon) || (<Type> == tHammerWeapon) || (<Type> == tAxeWeapon) || (<Type> == tFencingWeapon) || (<Type> == tBowWeapon) || (<Type> == tCrossbowWeapon) || (<Type> == tThrowingWeapon)) ? 1 : 0>


//
// Is* for new Armor TypeDefs
//

// IsArmor will be updated in Hard Code. We are adding Armor Categories now. Better control over each type.
[Function IsTypeArmor]
Return <Qval ((<Type> == tLeatherArmor) || (<Type> == tStuddedArmor) || (<Type> == tLeafArmor) || (<Type> == tHideArmor) || (<Type> == tClothArmor) || (<Type> == tChainmailArmor) || (<Type> == tRingmailArmor) || (<Type> == tPlatemailArmor) || (<Type> == tDragonArmor) || (<Type> == tStoneArmor) || (<Type> == tWoodlandArmor) || (<Type> == tBoneArmor) || (<Type> == tVirtueArmor))? 1 : 0>


[Function IsLeatherArmor]
Return <Qval (<Type> == tLeatherArmor) ? 1 :0>


[Function IsLeafArmor]
Return <Qval (<Type> == tLeafArmor) ? 1 :0>


[Function IsFurArmor]
Return <Qval (<Type> == tFurArmor) ? 1 :0>


[Function IsScuteArmor]
Return <Qval (<Type> == tScuteArmor) ? 1 :0>


[Function IsClothArmor]
Return <Qval (<Type> == tClothArmor) ? 1 :0>


[Function IsStuddedArmor]
Return <Qval (<Type> == tStuddedArmor) ? 1 :0>


[Function IsBoneArmor]
Return <Qval (<Type> == tBoneArmor) ? 1 :0>


[Function IsHideArmor]
Return <Qval (<Type> == tHideArmor) ? 1 :0>


[Function IsChainmailArmor]
Return <Qval (<Type> == tChainmailArmor) ? 1 :0>


[Function IsRingmailArmor]
Return <Qval (<Type> == tRingmailArmor) ? 1 :0>


[Function IsPlatemailArmor]
Return <Qval (<Type> == tPlatemailArmor) ? 1 :0>


[Function IsDragonArmor]
Return <Qval (<Type> == tDragonArmor) ? 1 :0>


[Function IsStoneArmor]
Return <Qval (<Type> == tStoneArmor) ? 1 :0>


[Function IsVirtueArmor]
Return <Qval (<Type> == tVirtueArmor) ? 1 :0>


[Function IsWoodlandArmor]
Return <Qval (<Type> == tWoodlandArmor) ? 1 :0>


[EOF]