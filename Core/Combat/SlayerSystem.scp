[comment EADamagesystem]
Author: Khaos
Version: 3.5.0.0
NPC Side controlled Slayer Damage to consume less resources in combat with Slayer Damage.

Script checks to make sure players have Slayer flags equipped in their Slayer/Super Slayer/misc Slayer variables and check against the enemies variables.
If these variables match the Slayer Damage token rises. This caps out at 3 with a check in the Damage function (per EA handling). Ea says misc
and Lesser don't stack; but that is redundant with a 300% cap anyhow and the checks within the script make sure you don't surpass this cap.

Items must contain the Slayer flags for the player to equip. This in turn gets added to the player. So this does force OSI/EA standards of needing the item
equipped to get the benefits of the Slayer Damage or the bane of the opposing Slayers.

NPCs need the Slayer flag added to their charActer variables as well. Make sure they are set using the naming schema or the flag #.

Updates:
- Fixed unsetting the bits.
- Is* is now IsSlayer*
- Removed IsSlayerMisc
- Cleaned up code a bit more with some dDef calls since it is all in Int values.
- Moved all SlayerMisc to SlayerSuper
- Cleaned up some typos
- Updated ToL Slayers.
- Switched @Equip to @ItemEquip.
- Fixed typo in first @ItemEquip check with calling Slayer instead of SlayerLesser.
- Added calls for Lesser Slayers in the opposed aligned Slayers. It is speculated they work in this fashion.
- Added chance to hit. Nothing is specIfied how often this fires off. There is now a controlling def. Use 0 - 100. 100 there will be no check and always hits. 0 always fails.
- Removed &= and replaced with &. It was calling undefined symbols.
- Added *Slayer as entries were missing it in the transition of renaming.
- Fixed a ElIf Typo "Elf" and other misc typos.
- Few switches from <Eval <Local.*>> to <dLocal.*>
- Optimized some more code.

Extreme Updates:
- Removed double <Slayer#> check in Check#Slayer functions
- Added SlayerDamO for Opposite Slayer Damage
- Fixed some typos
- Add Hval checks to prevent errors on console (ONE still happening because Slayer# is being considered as String, giving error on console.)

Xun
- Reverted back to some of the old code.
- Added SlayerAlignedType


Variables used on items and chars:
SlayerLesser
SlayerSuper

[DefName SlayerDamageControl]
// Damage control
SlayerDamL			3	// Lesser Slayer Damage.
SlayerDamS			2	// Super Slayer Damage.
SlayerDamO			2	// Opposite Slayer Damage
SlayerHitRatio		100	// chance to hit with a Slayer 100 always hits. Anything less and we will perform a test to hit.


// Attach to your players.
// Adds Slayer flag info from an item to char.
[Events eSlayersPChars]
On=@ItemEquip
If (<Act.SlayerLesser>)
 SlayerLesser |= <Act.SlayerLesser>
EndIf
If (<Act.SlayerSuper>)
 SlayerSuper |= <Act.SlayerSuper>
EndIf
Return 0

// Removes Slayer flag info char based on item.
On=@ItemUnequip
If (<Act.SlayerLesser>)
 SlayerLesser &= ~<Act.SlayerLesser>
EndIf
If (<Act.SlayerSuper>)
 SlayerSuper &= ~<Act.SlayerSuper>
EndIf
Return 0

// Attach to your NPCs
[Events eSlayersNPCs]
On=@SpellEffect
If !(<Local.DamageType> &SpellFDamage|SpellFHarm)
 Return 0
EndIf

If (!<Def0.SlayerHitRatio>)
 Return 0
EndIf
If (<Def0.SlayerHitRatio> != 100)
 If (<R1,100> > <Def0.SlayerHitRatio>)
  Return 0
 EndIf
EndIf
ArgN2 *= <SlayerAlignedType>

On=@GetHit
If (!<Def0.SlayerHitRatio>)
 Return 0
EndIf
If (<Def0.SlayerHitRatio> != 100)
 If (<R1,100> > <Def0.SlayerHitRatio>)
  Return 0
 EndIf
EndIf
local.SlayerDam=<SlayerAlignedType>
if (<local.SlayerDam>)
 say argn1=<dargn1> * <dlocal.slayerdam>
 ArgN1 *= <local.SlayerDam>
ENDIF

On=@Hit
If (!<Def0.SlayerHitRatio>)
 Return 0
EndIf
If (<Def0.SlayerHitRatio> != 100)
 If (<R1,100> > <Def0.SlayerHitRatio>)
  Return 0
 EndIf
EndIf
ArgN1 *= <SlayerOppositeType>


//
// FUNCTIONS
//

[Function SlayerSpellDamage]
If (<Local.SlayerDam> > 3)
 Local.SlayerDam=3
EndIf
ArgN2 *= <Local.SlayerDam>

// Slayer Damage Parsing Function
[Function SlayerDamage]
If (<Local.SlayerDam> > 3)
 Local.SlayerDam=3
EndIf
ArgN1 *= <Local.SlayerDam>

// Aligned Slayer Damage PvM
[Function SlayerAlignedType]
If (<SlayerLesser>) && (<Src.SlayerLesser>)
 return <CheckLesserSlayer>
ElIf (<SlayerSuper>) && (<Src.SlayerSuper>)
 return <CheckSuperSlayer>
EndIf
return 0

// Opposite Aligned Slayer Damage MvP
[Function SlayerOppositeType]
If (<SlayerLesser>) || (<SlayerSuper>)
 If (<SlayerSuper> &AbyssSlayer) || (<SlayerLesser> &GargoyleSlayer) && (<Src.SlayerSuper> &FeySlayer|ElementalSlayer) || (<Src.SlayerLesser> &AirElementalSlayer) || (<Src.SlayerLesser> &BloodElementalSlayer) || (<Src.SlayerLesser> &EarthElementalSlayer) || (<Src.SlayerLesser> &FireElementalSlayer) || (<Src.SlayerLesser> &PoisonElementalSlayer) || (<Src.SlayerLesser> &SnowElementalSlayer) || (<Src.SlayerLesser> &WaterElementalSlayer)
  return <dDef0.SlayerDamO>
 ElIf (<SlayerSuper> &ElementalSlayer) || (<Src.SlayerLesser> &AirElementalSlayer) BloodElementalSlayer) || (<Src.SlayerLesser> &EarthElementalSlayer) || (<Src.SlayerLesser> &FireElementalSlayer) || (<Src.SlayerLesser> &PoisonElementalSlayer) || (<Src.SlayerLesser> &SnowElementalSlayer) || (<Src.SlayerLesser> &WaterElementalSlayer) && (<Src.SlayerSuper> &AbyssSlayer) || (<Src.SlayerLesser> &GargoyleSlayer)
  return <dDef0.SlayerDamO>
 ElIf (<SlayerSuper> &FeySlayer) && (<Src.SlayerSuper> &AbyssSlayer) || (<Src.SlayerLesser> &GargoyleSlayer)
  return <dDef0.SlayerDamO>
 ElIf (<SlayerSuper> &ArachnidSlayer) || (<Src.SlayerLesser> &ScorpionSlayer) || (<Src.SlayerLesser> &SpiderSlayer) || (<Src.SlayerLesser> &TerathanSlayer) && (<Src.SlayerSuper> &ReptileSlayer) || (<Src.SlayerLesser> &DragonSlayer) || (<Src.SlayerLesser> &LizardmanSlayer) || (<Src.SlayerLesser> &OphidianSlayer) || (<Src.SlayerLesser> &SnakeSlayer)
  return <dDef0.SlayerDamO>
 ElIf (<SlayerSuper> &ReptileSlayer)  || (<Src.SlayerLesser> &DragonSlayer) || (<Src.SlayerLesser> &LizardmanSlayer) || (<Src.SlayerLesser> &OphidianSlayer) || (<Src.SlayerLesser> &SnakeSlayer) && (<Src.SlayerSuper> &ArachnidSlayer) || (<Src.SlayerLesser> &ScorpionSlayer) || (<Src.SlayerLesser> &SpiderSlayer) || (<Src.SlayerLesser> &TerathanSlayer)
  return <dDef0.SlayerDamO>
 ElIf (<SlayerSuper> &RepondSlayer) || (<Src.SlayerLesser> &GoblinSlayer) || (<Src.SlayerLesser> &OrcSlayer) || (<Src.SlayerLesser> &OgreSlayer) || (<Src.SlayerLesser> &TrollSlayer) && (<Src.SlayerSuper> &UndeadSlayer)
  return <dDef0.SlayerDamO>
 ElIf (<SlayerSuper> &UndeadSlayer) && (<Src.SlayerSuper> &RepondSlayer) || (<Src.SlayerLesserSlayer> &GoblinSlayer) || (<Src.SlayerLesser> &OrcSlayer) || (<Src.SlayerLesser> &OgreSlayer) || (<Src.SlayerLesser> &TrollSlayer)
  return <dDef0.SlayerDamO>
 EndIf
EndIf

[Function IsSlayerLesser]
Return <Qval (<Hval <SlayerLesser>>) ? 1 : 0 >

[Function IsSlayerSuper]
Return <Qval (<Hval <SlayerSuper>>) ? 1 : 0 >

//
// Slayer Flags
//

// Lesser Slayers
[Defname SlayerLesserFlags]
GargoyleSlayer			01
AirElementalSlayer		02
BloodElementalSlayer	04
EarthElementalSlayer	08
FireElementalSlayer		010
PoisonElementalSlayer	020
SnowElementalSlayer		040
WaterElementalSlayer	080
ScorpionSlayer			0100
SpiderSlayer			0200
TerathanSlayer			0400
DragonSlayer			0800
LizardmanSlayer			01000
OphidianSlayer			02000
SnakeSlayer				04000
GoblinSlayer			08000
OrcSlayer				010000
OgreSlayer				020000
TrollSlayer				040000
DinosaurSlayer			080000
MyrmidexSlayer			0100000
EodonTribesmanSlayer	0200000

// Super Slayers
[DefName SlayerSuperFlags]
AbyssSlayer				01
ElementalSlayer			02
FeySlayer				04
ArachnidSlayer			08
ReptileSlayer			010
RepondSlayer			020
UndeadSlayer			040
VerminSlayer			080
EodonSlayer				0100
BatSlayer				0200
BearSlayer				0400
BeetleSlayer			0800
BirdSlayer				01000
BovineSlayer			02000
FlameSlayer				04000
IceSlayer				08000
MageSlayer				010000
WolfSlayer				020000
DemonSlayer				AbyssSlayer
DaemonSlayer			AbyssSlayer

[EOF]